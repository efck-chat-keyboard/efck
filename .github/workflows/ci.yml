name: CI
on:
  push: { branches: [master] }
  pull_request: { branches: [master] }
  schedule: [ cron: '4 3 6 * *' ]  # At 03:04 on 6th

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup

      - run: pip install -U flake8
      - run: flake8
      - run: scripts/lint-qt-imports.sh

  test-linux:
    needs: lint
    runs-on: ${{ matrix.os }}
    env:
      QT_API: ${{ matrix.pyqt }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        pyqt: [ pyqt6, pyside6, pyqt5 ]
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install -U --pre -e .[dev]
      - run: pip install ${{ matrix.pyqt }}
      - run: sudo apt-get install -y --no-install-recommends xvfb flwm xdotool libnotify-bin
        # There deps were obtained by running with env: QT_DEBUG_PLUGINS=1
      - run: sudo apt-get install -y --no-install-recommends libegl1 libxkbcommon-x11-0 libxcb1 libxcb-*{0,1,2,4}
      - run: scripts/download-emoji-font.py
        # Run tests under X with a window manager
        # We check test.log in case Qt segfaulted on exit
      - run: xvfb-run -- sh -c 'flwm & time catchsegv coverage run -m efck.tests -v | tee test.log || grep -Pq "^OK$" test.log'
      - run: coverage report

  test-windows:
    needs: test-linux
    runs-on: windows-latest
    env:
      QT_API: ${{ matrix.pyqt }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        pyqt: [ pyqt6, pyside6 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install -U --pre -e .[dev]
      - run: pip install ${{ matrix.pyqt }}
      - run: scripts/download-emoji-font.py
      - run: coverage run -m efck.tests -v
      - run: coverage report

  test-macos:
    needs: test-linux
    runs-on: macos-latest
    env:
      QT_API: ${{ matrix.pyqt }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        pyqt: [ pyqt6, pyside6 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install -U --pre -e .[dev]
      - run: pip install ${{ matrix.pyqt }}
      - run: scripts/download-emoji-font.py
      - run: .github/scripts/prepare-macos-runner.sh
      - run: coverage run -m efck.tests -v
      - run: coverage report

  installer-windows:
    needs: [ lint, test-linux ]
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with: { python-version: '3.10' }

      - run: pip install -U --pre -e .[dev]
      - run: pip install pyqt6
      - run: scripts/png2icobmp.py
      - run: pyinstaller efck-pyi.spec
      - run: cd dist && tree /f /a
      - run: choco install du && cd dist && du -v
      - run: dist/efck-chat-keyboard/efck-chat-keyboard.exe --help  # smoke test
      - run: choco install InnoSetup && iscc scripts/win-installer.iss
      - run: FOR %a in (dist\*.exe) DO %a /verysilent /log=installer.log && type installer.log
      - uses: actions/upload-artifact@v3
        with:
          name: Windows-installer
          path: dist/*.exe


  installer-macos:
    needs: [ lint, test-linux ]
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with: { python-version: '3.10' }

      - run: pip install -U --pre -e .[dev,mac]
      - run: pip install pyqt6
      - run: pyinstaller efck-pyi.spec
      - run: brew update && brew install tree && cd dist && tree -h *.app
      - run: cd dist && du -ah *.app | sort -h
      - run: cp dist/*/*/Info.plist . && plutil -convert xml1 Info.plist && cat Info.plist
      - run: $(find dist -name '*.run') --help  # smoke test
      - run: brew install create-dmg
      - run: scripts/make-macos-dmg.sh
      - uses: actions/upload-artifact@v3
        with:
          name: macOS-package
          path: dist/*.dmg
