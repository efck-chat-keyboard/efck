name: CI
on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request: { branches: [master] }
  schedule: [ cron: '4 3 6 * *' ]  # At 03:04 on 6th

jobs:
  lint:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
      - run: pip install -U --pre flake8
      - run: flake8
      - run: scripts/lint-qt-imports.sh
      - run: scripts/check-unicode-version.sh

  test-linux:
    timeout-minutes: 5
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install -U --pre -e .[dev] pyqt6 pyside6 pyqt5
      - run: sudo apt-get install -y --no-install-recommends xvfb flwm xdotool libnotify-bin
        # There deps were obtained by running with env: QT_DEBUG_PLUGINS=1
      - run: sudo apt-get install -y --no-install-recommends libegl1 libxkbcommon-x11-0 libxcb1 libxcb-*{0,1,2,4}
      - run: scripts/download-emoji-font.py
      - run: QT_API=pyqt6 .github/scripts/ci-linux-run-tests.sh
      - run: QT_API=pyqt5 .github/scripts/ci-linux-run-tests.sh
      - run: QT_API=pyside6 .github/scripts/ci-linux-run-tests.sh
      - run: coverage report

  test-windows:
    timeout-minutes: 5
    needs: test-linux
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install -U --pre -e .[dev] pyqt6 pyside6
      - run: coverage run -m efck.tests -v
        env: { QT_API: pyqt6 }
      - run: coverage run -m efck.tests -v
        env: { QT_API: pyside6 }
      - run: coverage report

  test-macos:
    timeout-minutes: 5
    needs: test-linux
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install --pre -e .[dev] pyqt6 pyside6
      - run: .github/scripts/prepare-macos-runner.sh
      - run: QT_API=pyqt6 coverage run -m efck.tests -v
      - run: QT_API=pyside6 coverage run -m efck.tests -v
      - run: coverage report


  installer-linux:
    timeout-minutes: 5
    needs: [ lint, test-linux ]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup

      - run: pip install -e .[dev] pyqt6
      - run: pyinstaller installer/pyinstaller.spec
      - run: cd dist && tree
      - run: cd dist && du -ah | sort -h
      - run: $(find dist -name '*.run') --help  # smoke test
      - run: find dist -name '*.so.*' -o -name '*.so' | xargs chmod -x
      - run: cd dist && tar -czvf EFCK-Chat-Keyboard.Linux-x64.tar.gz *
      - uses: actions/upload-artifact@v3
        with:
          name: GNU/Linux build
          path: dist/*.tar.gz
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*.tar.gz

  installer-windows:
    timeout-minutes: 5
    needs: [ lint, test-windows ]
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup

      - run: pip install -e .[dev] pyqt6
      - run: installer/png2icobmp.py
      - run: pyinstaller installer/pyinstaller.spec
      - run: cd dist && tree /f /a
      - run: choco install du && cd dist && du -v
      - run: dist/efck-chat-keyboard/efck-chat-keyboard.exe --help  # smoke test
      - run: choco install InnoSetup && iscc installer/win-installer.iss
      - run: cd dist && du *.exe
      - run: FOR %a in (dist\*.exe) DO %a /verysilent /log=installer.log && type installer.log
      - uses: actions/upload-artifact@v3
        with:
          name: Windows installer
          path: dist/*.exe
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*.exe

  installer-macos:
    timeout-minutes: 5
    needs: [ lint, test-macos ]
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup

      - run: pip install -e .[dev] pyqt6
      - run: pyinstaller installer/pyinstaller.spec
      - run: brew update && brew install tree && cd dist && tree -h *.app
      - run: cd dist && du -ah *.app | sort -h
      - run: cp dist/*/*/Info.plist . && plutil -convert xml1 Info.plist && cat Info.plist
      - run: $(find dist -name '*.run') --help  # smoke test
      - run: brew install create-dmg && installer/make-macos-dmg.sh
      - run: cd dist && du -ah *.dmg
      - uses: actions/upload-artifact@v3
        with:
          name: macOS package
          path: dist/*.dmg
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*.dmg
